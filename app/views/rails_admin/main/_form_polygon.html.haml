:javascript
  var map = {};
  var nowEditingShape = {};
  function initShapeField() {
    jQuery(function(){
      var latitude = #{field.center.y}; 
      var longitude = #{field.center.x}; 
      var latlng = new google.maps.LatLng(latitude, longitude);
      var geocoder = new google.maps.Geocoder();

      var myOptions = {
        zoom: #{field.default_zoom_level},
        center: latlng,
        mapTypeId: google.maps.MapTypeId.#{field.map_type},
        scrollwheel: false
      };

      map = new google.maps.Map(document.getElementById("#{field.dom_name}"), myOptions);

      var locations = {
            "type": "FeatureCollection",
            "features": [
               { "type": "Feature", "id": "#{field.dom_name}", "properties": { "shape": "Polygon", "category": "default" }, "editable": true, "geometry": #{ raw field.geo_json }}
            ]
        };
      
      console.log(locations);
      var shape = [];
      var ID = '#{field.dom_name}';
      map.data.addGeoJson(locations, ID)
      for (var i = 0; i < map.data.getFeatureById(ID).getGeometry().getLength(); i++) {
        var shapeData = map.data.getFeatureById(ID).getGeometry().getAt(i).getArray();
        shape.push(shapeData);
      }

      console.log(JSON.stringify(shape));

      map.data.setControls(['Polygon']);
      map.data.setStyle({
        editable: true,
        draggable: true
      });

      nowEditingShape = new google.maps.Polygon({
        paths: shape,
        strokeColor: '#FF0000',
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: '#FF0000',
        fillOpacity: 0.35,
      editable: true
      });
      map.data.remove(map.data.getFeatureById(ID));
      nowEditingShape.setMap(map);


      google.maps.event.addListener(map, 'click', function(e) {
        updateLocation(e.latLng);
      });

      google.maps.event.addListener(nowEditingShape,'dragend',function(e) {
        updateLocation(e.latLng);
      });

      google.maps.event.addListener(nowEditingShape.getPath(), 'set_at', showArrays);

    google.maps.event.addListener(nowEditingShape.getPath(), 'insert_at', showArrays);

function showArrays(event) {
  // Since this polygon has only one path, we can call getPath() to return the
  // MVCArray of LatLngs.
//  const polygon = this;
  //console.log(polygon.getArray());
  console.log(event);
  const vertices = this;//polygon.getPath();
  let contentString =
    "<b>Bermuda Triangle polygon</b><br>"
   /*  "Clicked location: <br>" +
    event.latLng.lat() +
    "," +
    event.latLng.lng() +
    "<br>"; */

  // Iterate over the vertices.
  for (let i = 0; i < vertices.getLength(); i++) {
    const xy = vertices.getAt(i);
    contentString +=
      "<br>" + "Coordinate " + i + ":<br>" + xy.lat() + "," + xy.lng();
  }
  // Replace the info window's content and position.
  infoWindow.setContent(contentString);
  infoWindow.setPosition(map.center);
  infoWindow.open(map);
}
      google.maps.event.addListener(nowEditingShape,'click',function(e) {
        console.log(e);
        updateLocation(e.latLng);
      });

      google.maps.event.addListener(nowEditingShape,'bounds_changed', function(e) {
        console.log('bounds_changed');
        console.log(e);
      });
      nowEditingShape.addListener('bounds_changed', function(e) {
        console.log('nowEditingShape.bounds_changed');
        console.log(e);
      });

      function updateLocation(location) {
        console.log(nowEditingShape);
        jQuery("##{field.shape_dom_name}").val(location.lat());

        map.setCenter(location);
      }

    });
  }

= javascript_include_tag ("https://maps.googleapis.com/maps/api/js?key=#{field.google_api_key}&sensor=false&callback=initShapeField")

%style
  = "##{field.dom_name} label {width: auto;display: inline;}"
  = "##{field.dom_name} img {max-width: none;}"

%div.ramf-map-container{:id => field.dom_name, :style => "margin: 20px 0; padding: 0; height: #{field.map_height}px; float: left; width: 100%;"}
%div.control-group
  = form.send :label, field.name, :class => "control-label"
  %div.controls
    = form.send :text_field, field.name, :id => field.shape_dom_name, :class => "form-control"

